#!/usr/bin/env python

# Copyright 2017, LabN Consulting, L.L.C.
# Authored by Lou Berger <lberger@labn.net>
#
# Permission to use, copy, modify, and/or distribute this software
# for any purpose with or without fee is hereby granted, provided
# that the above copyright notice and this permission notice appear
# in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND NETDEF DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL NETDEF BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY
# DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
# WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
# ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
# OF THIS SOFTWARE.

import os
import re
import sys
import shutil
from topolog import logger

class AutoGen:
    autodir = '<not set>'
    test_runner = '<not set>'
    fd = None
    init_template = """

def test_autogen_lu_start():
    tgen = get_topogen()
    logger.info('Starting autogenerated tests')
"""
    close_template = """

def test_autogen_lu_finish():
    logger.info('Done with autogenerated tests')
    print(luFinish())

"""
    test_template = """
    tgen = get_topogen()
"""

#init class
_au = AutoGen()

def auInit(**lsArgs):
    pwd = os.getcwd()
    base = os.path.dirname(os.path.realpath(pwd))
    test = os.path.basename(pwd)
    autodir = os.path.join(base, 'autogen/{}'.format(test))
    #remove old directory
    if os.path.isdir(autodir):
        shutil.rmtree(autodir)
    if os.path.exists(autodir):
        os.remove(autodir)
    #copy in template
    shutil.copytree(base+'/autogen/template', autodir)
    #add warning
    fd = open(os.path.join(autodir, 'DO_NOT_MODIFY_THIS_DIRECTORY'), 'w')
    fd.write('WARNING: This directory is automatically created *and* deleted!\n')
    fd.write('         Any modifications will be lost.\n')
    fd.close()
    #open autogen file
    _au.autodir = autodir
    _au.test_runner = 'test_runner.py'
    _au.fd = open(os.path.join(autodir, 'autogen_tests.py'), 'a')
    _au.fd.write(_au.init_template)
    args = []
    for arg in lsArgs:
        args.append('%s=%s' % (arg, lsArgs[arg]))
    s = ', '
    init = '    luStart('+s.join(args)+')\n'
    _au.fd.write(init)

def auAddTest(script, SkipIfFailed=True, CallOnFail=None, CheckFunc=None):
    if not os.path.isfile(script):
        logger.error('Could not find script file: ' + script)
    assert os.path.isfile(script)
    assert _au.fd != None
    indent = '    '
    _au.fd.write('\n\ndef test_autogen_{}():\n'.format(os.path.splitext(os.path.basename(script))[0]))
    _au.fd.write(_au.test_template)
    _au.fd.write('\n{}logger.info("Starting autogenerated test: {}")\n'.format(indent, script))
    _au.fd.write('{}numEntry = luNumFail()\n'.format(indent))

    if SkipIfFailed:
        _au.fd.write('{}if tgen.routers_have_failure():\n'.format(indent))
        _au.fd.write('{}{}pytest.skip(tgen.errors)\n'.format(indent, indent))
        _au.fd.write('{}if numEntry > 0:\n'.format(indent))
        _au.fd.write('{}{}pytest.skip("Have %d errors" % numEntry)\n'.format(indent, indent))
    
    if CheckFunc!=None:
        _au.fd.write('\n{}check = {}\n'.format(indent, CheckFunc)) 
        _au.fd.write('{}if check != True:\n'.format(indent))
        _au.fd.write('{}{}pytest.skip("Check function \'{}\' returned: " + check)\n'.format(indent, indent,  CheckFunc))
        _au.fd.write('{}else:\n'.format(indent))
        indent += '    '
        _au.fd.write('{}luInclude("{}", {})\n'.format(indent, script, CallOnFail))
    #finish check
    _au.fd.write('{}numFail = luNumFail() - numEntry\n'.format(indent))
    _au.fd.write('{}if numFail > 0:\n'.format(indent))
    indent += '    '
    _au.fd.write('{}luShowFail()\n'.format(indent))
    _au.fd.write('{}fatal_error = "%d tests failed" % numFail\n'.format(indent))
    _au.fd.write('{}assert "{} failed" == "See summary output above", fatal_error\n'.format(indent, script))

def auClose():
    if _au.fd == None:
        return
    _au.fd.write(_au.close_template)
    _au.fd.close()
    _au.fd = None
    return

def auRun(args=''):
    if _au.fd != None:
        _au.fd.close()
    cwd = os.getcwd()
    if not os.path.isdir(_au.autodir):
        logger.error('Could not find autogenerated directory: ' +  _au.autodir)
    assert (os.path.isdir(_au.autodir))
    os.chdir(_au.autodir)
    if not os.path.isfile(_au.test_runner):
        logger.error('Could not find autogenerated test file: ' +  _au.test_runner)
    assert os.path.isfile(_au.test_runner)
    ret = os.system('{} {}'.format(_au.test_runner, args))
    os.chdir(cwd)
